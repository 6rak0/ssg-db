import './App.css.proxy.js';
/* src/App.svelte generated by Svelte v3.23.2 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	outro_and_destroy_block,
	prevent_default,
	run_all,
	safe_not_equal,
	set_input_value,
	set_store_value,
	space,
	transition_in,
	transition_out,
	update_keyed_each
} from "/web_modules/svelte/internal.js";

import axios from "/web_modules/axios/index.js";
import { onMount } from "/web_modules/svelte.js";
import { reportes, reportesOrdenados } from "./stores.js";
import Reporte from "./components/Reporte.js";
import Modal from "./components/Modal.js";
import Form from "./components/Form.js";
import Loading from "./components/Loading.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (94:2) {#if loading}
function create_if_block_3(ctx) {
	let loading_1;
	let current;
	loading_1 = new Loading({});

	return {
		c() {
			create_component(loading_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(loading_1, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(loading_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(loading_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(loading_1, detaching);
		}
	};
}

// (101:21) 
function create_if_block_2(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.textContent = "No hay reportes con esa fracciÃ³n";
			attr(div, "class", "notification has-text-centered");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (97:2) {#if $reportes.length > 0}
function create_if_block_1(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let each_value = /*$reportesOrdenados*/ ctx[4];
	const get_key = ctx => /*reporte*/ ctx[5].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*$reportesOrdenados, deleteReporte*/ 272) {
				const each_value = /*$reportesOrdenados*/ ctx[4];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block, each_1_anchor, get_each_context);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (98:4) {#each $reportesOrdenados as reporte (reporte.id)}
function create_each_block(key_1, ctx) {
	let first;
	let reporte_1;
	let current;
	reporte_1 = new Reporte({ props: { reporte: /*reporte*/ ctx[5] } });
	reporte_1.$on("delete", /*deleteReporte*/ ctx[8]);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(reporte_1.$$.fragment);
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			mount_component(reporte_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const reporte_1_changes = {};
			if (dirty & /*$reportesOrdenados*/ 16) reporte_1_changes.reporte = /*reporte*/ ctx[5];
			reporte_1.$set(reporte_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(reporte_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(reporte_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(reporte_1, detaching);
		}
	};
}

// (108:0) {#if showModal}
function create_if_block(ctx) {
	let modal;
	let current;

	modal = new Modal({
			props: {
				title: "Nuevo reporte",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	modal.$on("close", /*close_handler*/ ctx[11]);

	return {
		c() {
			create_component(modal.$$.fragment);
		},
		m(target, anchor) {
			mount_component(modal, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const modal_changes = {};

			if (dirty & /*$$scope, reporte*/ 16416) {
				modal_changes.$$scope = { dirty, ctx };
			}

			modal.$set(modal_changes);
		},
		i(local) {
			if (current) return;
			transition_in(modal.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(modal.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(modal, detaching);
		}
	};
}

// (109:2) <Modal title="Nuevo reporte" on:close={() => (showModal = false)}>
function create_default_slot(ctx) {
	let form;
	let current;
	form = new Form({ props: { reporte: /*reporte*/ ctx[5] } });
	form.$on("submit", /*handleSubmit*/ ctx[7]);

	return {
		c() {
			create_component(form.$$.fragment);
		},
		m(target, anchor) {
			mount_component(form, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const form_changes = {};
			if (dirty & /*reporte*/ 32) form_changes.reporte = /*reporte*/ ctx[5];
			form.$set(form_changes);
		},
		i(local) {
			if (current) return;
			transition_in(form.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(form.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(form, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div4;
	let h1;
	let t1;
	let div3;
	let form;
	let div2;
	let div0;
	let input;
	let t2;
	let div1;
	let t4;
	let button1;
	let t6;
	let hr;
	let t7;
	let t8;
	let current_block_type_index;
	let if_block1;
	let t9;
	let if_block2_anchor;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*loading*/ ctx[2] && create_if_block_3(ctx);
	const if_block_creators = [create_if_block_1, create_if_block_2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$reportes*/ ctx[3].length > 0) return 0;
		if (!/*loading*/ ctx[2]) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx, -1))) {
		if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	let if_block2 = /*showModal*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			div4 = element("div");
			h1 = element("h1");
			h1.textContent = "Base de datos";
			t1 = space();
			div3 = element("div");
			form = element("form");
			div2 = element("div");
			div0 = element("div");
			input = element("input");
			t2 = space();
			div1 = element("div");
			div1.innerHTML = `<button class="button is-info">buscar</button>`;
			t4 = space();
			button1 = element("button");
			button1.textContent = "Agregar";
			t6 = space();
			hr = element("hr");
			t7 = space();
			if (if_block0) if_block0.c();
			t8 = space();
			if (if_block1) if_block1.c();
			t9 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
			attr(h1, "class", "subtitle is-1 has-text-centered");
			attr(input, "class", "input");
			attr(input, "type", "text");
			attr(input, "pattern", "\\d\\d\\d\\d\\.\\d\\d\\.\\d\\d");
			attr(input, "placeholder", "XXXX.XX.XX");
			attr(div0, "class", "control");
			attr(div1, "class", "control");
			attr(div2, "class", "field has-addons");
			attr(button1, "class", "button is-primary");
			attr(div3, "class", "container  svelte-t8533u");
			attr(div4, "class", "app svelte-t8533u");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, h1);
			append(div4, t1);
			append(div4, div3);
			append(div3, form);
			append(form, div2);
			append(div2, div0);
			append(div0, input);
			set_input_value(input, /*query*/ ctx[0]);
			append(div2, t2);
			append(div2, div1);
			append(div3, t4);
			append(div3, button1);
			append(div4, t6);
			append(div4, hr);
			append(div4, t7);
			if (if_block0) if_block0.m(div4, null);
			append(div4, t8);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(div4, null);
			}

			insert(target, t9, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler*/ ctx[9]),
					listen(form, "submit", prevent_default(/*search*/ ctx[6])),
					listen(button1, "click", /*click_handler*/ ctx[10])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*query*/ 1 && input.value !== /*query*/ ctx[0]) {
				set_input_value(input, /*query*/ ctx[0]);
			}

			if (/*loading*/ ctx[2]) {
				if (if_block0) {
					if (dirty & /*loading*/ 4) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div4, t8);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block1) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block1 = if_blocks[current_block_type_index];

					if (!if_block1) {
						if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block1.c();
					}

					transition_in(if_block1, 1);
					if_block1.m(div4, null);
				} else {
					if_block1 = null;
				}
			}

			if (/*showModal*/ ctx[1]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*showModal*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div4);
			if (if_block0) if_block0.d();

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}

			if (detaching) detach(t9);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $reportes;
	let $reportesOrdenados;
	component_subscribe($$self, reportes, $$value => $$invalidate(3, $reportes = $$value));
	component_subscribe($$self, reportesOrdenados, $$value => $$invalidate(4, $reportesOrdenados = $$value));

	let reporte = {
		id: null,
		descripcion: null,
		nombre: null,
		fraccion: null,
		ligamento: null,
		lig: null,
		aca: null,
		acabado: null,
		composicion: null,
		filfib: null,
		ancho: null,
		gramaje: null,
		tejido: null,
		otros: null,
		conclusion: null
	};

	let query;
	let showModal = false;
	let loading = false;

	onMount(async () => {
		$$invalidate(2, loading = true);
		const { data } = await axios.get("/api/reportes");
		set_store_value(reportes, $reportes = data);
		$$invalidate(2, loading = false);
	});

	function search() {
		set_store_value(reportes, $reportes = $reportes.filter(r => r.fraccion === query));
	}

	async function handleSubmit(e) {
		$$invalidate(5, reporte = e.detail);
		$$invalidate(5, reporte.creado = new Date().getTime(), reporte);
		const response = await axios.post("/api/reportes", reporte);
		set_store_value(reportes, $reportes = [response.data, ...$reportes]);
		$$invalidate(1, showModal = false);
	}

	async function deleteReporte(id) {
		const response = await axios.delete("/api/reportes/" + id.detail);

		if (response.data.id === id.detail) {
			set_store_value(reportes, $reportes = $reportes.filter(r => r._id != id.detail));
		}
	}

	function input_input_handler() {
		query = this.value;
		$$invalidate(0, query);
	}

	const click_handler = () => $$invalidate(1, showModal = true);
	const close_handler = () => $$invalidate(1, showModal = false);

	return [
		query,
		showModal,
		loading,
		$reportes,
		$reportesOrdenados,
		reporte,
		search,
		handleSubmit,
		deleteReporte,
		input_input_handler,
		click_handler,
		close_handler
	];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;